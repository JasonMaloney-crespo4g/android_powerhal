From 108e022b8f4f1b8f1ac068bc1bca28ecd0b00d0e Mon Sep 17 00:00:00 2001
From: Will Tisdale <willtisdale@gmail.com>
Date: Sat, 8 Sep 2012 21:56:06 +0100
Subject: [PATCH] crespo: PowerHAL based on tuna for use with boostpulse
 ondemand

Change-Id: I76710f258bbe6baca31d361ee495b5f8afd1bded
---
 power/Android.mk     |   27 ++++++++++
 power/power_crespo.c |  143 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 170 insertions(+)
 create mode 100644 power/Android.mk
 create mode 100644 power/power_crespo.c

diff --git a/power/Android.mk b/power/Android.mk
new file mode 100644
index 0000000..9a06fd7
--- /dev/null
+++ b/power/Android.mk
@@ -0,0 +1,27 @@
+# Copyright (C) 2012 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+
+LOCAL_PATH := $(call my-dir)
+
+# HAL module implemenation stored in
+# hw/<POWERS_HARDWARE_MODULE_ID>.<ro.hardware>.so
+include $(CLEAR_VARS)
+
+LOCAL_MODULE_PATH := $(TARGET_OUT_SHARED_LIBRARIES)/hw
+LOCAL_SHARED_LIBRARIES := liblog libcutils
+LOCAL_SRC_FILES := power_crespo.c
+LOCAL_MODULE := power.crespo
+LOCAL_MODULE_TAGS := optional
+include $(BUILD_SHARED_LIBRARY)
diff --git a/power/power_crespo.c b/power/power_crespo.c
new file mode 100644
index 0000000..11f8693
--- /dev/null
+++ b/power/power_crespo.c
@@ -0,0 +1,143 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include <errno.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
+#define LOG_TAG "Crespo PowerHAL"
+#include <utils/Log.h>
+
+#include <hardware/hardware.h>
+#include <hardware/power.h>
+
+#define ONDEMAND_BOOSTPULSE_PATH "/sys/devices/system/cpu/cpufreq/ondemand/boostpulse"
+#define SAMPLING_RATE_ONDEMAND "/sys/devices/system/cpu/cpufreq/ondemand/sampling_rate"
+#define SAMPLING_RATE_SCREEN_ON "50000"
+#define SAMPLING_RATE_SCREEN_OFF "500000"
+
+
+struct crespo_power_module {
+    struct power_module base;
+    pthread_mutex_t lock;
+    int boostpulse_fd;
+    int boostpulse_warned;
+};
+
+static void sysfs_write(char *path, char *s)
+{
+    char buf[80];
+    int len;
+    int fd = open(path, O_WRONLY);
+
+    if (fd < 0) {
+        strerror_r(errno, buf, sizeof(buf));
+        ALOGE("Error opening %s: %s\n", path, buf);
+        return;
+    }
+
+    len = write(fd, s, strlen(s));
+    if (len < 0) {
+        strerror_r(errno, buf, sizeof(buf));
+        ALOGE("Error writing to %s: %s\n", path, buf);
+    }
+
+    close(fd);
+}
+
+static void crespo_power_init(struct power_module *module)
+{
+    sysfs_write(SAMPLING_RATE_ONDEMAND, SAMPLING_RATE_SCREEN_ON);
+}
+
+static int boostpulse_open(struct crespo_power_module *crespo)
+{
+    char buf[80];
+
+    pthread_mutex_lock(&crespo->lock);
+    if (crespo->boostpulse_fd < 0) {
+        crespo->boostpulse_fd = open(ONDEMAND_BOOSTPULSE_PATH, O_WRONLY);
+
+        if (crespo->boostpulse_fd < 0 && !crespo->boostpulse_warned) {
+            strerror_r(errno, buf, sizeof(buf));
+            ALOGE("Error opening boostpulse_fd: %s: %s\n", buf);
+            crespo->boostpulse_warned = 1;
+        }
+    }
+
+    pthread_mutex_unlock(&crespo->lock);
+    return crespo->boostpulse_fd;
+}
+
+static void crespo_power_set_interactive(struct power_module *module, int on)
+{
+    sysfs_write(SAMPLING_RATE_ONDEMAND,
+                on ? SAMPLING_RATE_SCREEN_ON : SAMPLING_RATE_SCREEN_OFF);
+}
+
+static void crespo_power_hint(struct power_module *module, power_hint_t hint,
+                            void *data)
+{
+    struct crespo_power_module *crespo = (struct crespo_power_module *) module;
+    char buf[80];
+    int len;
+
+    switch (hint) {
+    case POWER_HINT_INTERACTION:
+        if (boostpulse_open(crespo) >= 0) {
+	    len = write(crespo->boostpulse_fd, "1", 1);
+
+	    if (len < 0) {
+	        strerror_r(errno, buf, sizeof(buf));
+		ALOGE("Error writing to boostpulse: %s\n", buf);
+	    }
+	}
+        break;
+
+    case POWER_HINT_VSYNC:
+        break;
+
+    default:
+        break;
+    }
+}
+
+static struct hw_module_methods_t power_module_methods = {
+    .open = NULL,
+};
+
+struct crespo_power_module HAL_MODULE_INFO_SYM = {
+    base: {
+        common: {
+            tag: HARDWARE_MODULE_TAG,
+            module_api_version: POWER_MODULE_API_VERSION_0_2,
+            hal_api_version: HARDWARE_HAL_API_VERSION,
+            id: POWER_HARDWARE_MODULE_ID,
+            name: "Crespo Power HAL",
+            author: "The Android Open Source Project",
+            methods: &power_module_methods,
+        },
+
+       init: crespo_power_init,
+       setInteractive: crespo_power_set_interactive,
+       powerHint: crespo_power_hint,
+    },
+
+    lock: PTHREAD_MUTEX_INITIALIZER,
+    boostpulse_fd: -1,
+    boostpulse_warned: 0,
+};
-- 
1.7.9.5

