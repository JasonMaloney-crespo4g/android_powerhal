From b0965dce013b92ad89d6a8085ba658f8c97e7c14 Mon Sep 17 00:00:00 2001
From: Will Tisdale <willtisdale@gmail.com>
Date: Sun, 9 Sep 2012 00:20:29 +0100
Subject: [PATCH 2/2] tuna: PowerHAL: Cleanup Remove all PowerHAL code related
 to interactive governor

---
 power/power_tuna.c |   37 ++++++-------------------------------
 1 file changed, 6 insertions(+), 31 deletions(-)

diff --git a/power/power_tuna.c b/power/power_tuna.c
index 81ba65f..0ef22fb 100644
--- a/power/power_tuna.c
+++ b/power/power_tuna.c
@@ -25,7 +25,6 @@
 #include <hardware/hardware.h>
 #include <hardware/power.h>
 
-#define BOOSTPULSE_PATH "/sys/devices/system/cpu/cpufreq/interactive/boostpulse"
 #define ONDEMAND_BOOSTPULSE_PATH "/sys/devices/system/cpu/cpufreq/ondemand/boostpulse"
 #define SAMPLING_RATE_ONDEMAND "/sys/devices/system/cpu/cpufreq/ondemand/sampling_rate"
 #define SAMPLING_RATE_SCREEN_ON "50000"
@@ -62,21 +61,7 @@ static void sysfs_write(char *path, char *s)
 
 static void tuna_power_init(struct power_module *module)
 {
-    /*
-     * cpufreq interactive governor: timer 20ms, min sample 60ms,
-     * hispeed 700MHz at load 50%.
-     */
     sysfs_write(SAMPLING_RATE_ONDEMAND, SAMPLING_RATE_SCREEN_ON);
-    sysfs_write("/sys/devices/system/cpu/cpufreq/interactive/timer_rate",
-                "20000");
-    sysfs_write("/sys/devices/system/cpu/cpufreq/interactive/min_sample_time",
-                "60000");
-    sysfs_write("/sys/devices/system/cpu/cpufreq/interactive/hispeed_freq",
-                "700000");
-    sysfs_write("/sys/devices/system/cpu/cpufreq/interactive/go_hispeed_load",
-                "50");
-    sysfs_write("/sys/devices/system/cpu/cpufreq/interactive/above_hispeed_delay",
-                "100000");
 }
 
 static int boostpulse_open(struct tuna_power_module *tuna)
@@ -86,15 +71,12 @@ static int boostpulse_open(struct tuna_power_module *tuna)
     pthread_mutex_lock(&tuna->lock);
 
     if (tuna->boostpulse_fd < 0) {
-        tuna->boostpulse_fd = open(BOOSTPULSE_PATH, O_WRONLY);
-        if (tuna->boostpulse_fd < 0) {
-            tuna->boostpulse_fd = open(ONDEMAND_BOOSTPULSE_PATH, O_WRONLY);
-
-            if (tuna->boostpulse_fd < 0 && !tuna->boostpulse_warned) {
-                strerror_r(errno, buf, sizeof(buf));
-                ALOGE("Error opening boostpulse_fd: %s: %s\n", buf);
-                tuna->boostpulse_warned = 1;
-            }
+        tuna->boostpulse_fd = open(ONDEMAND_BOOSTPULSE_PATH, O_WRONLY);
+
+        if (tuna->boostpulse_fd < 0 && !tuna->boostpulse_warned) {
+            strerror_r(errno, buf, sizeof(buf));
+            ALOGE("Error opening boostpulse_fd: %s: %s\n", ONDEMAND_BOOSTPULSE_PATH, buf);
+            tuna->boostpulse_warned = 1;
         }
     }
 
@@ -104,13 +86,6 @@ static int boostpulse_open(struct tuna_power_module *tuna)
 
 static void tuna_power_set_interactive(struct power_module *module, int on)
 {
-    /*
-     * Lower maximum frequency when screen is off.  CPU 0 and 1 share a
-     * cpufreq policy.
-     */
-
-    sysfs_write("/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq",
-                on ? "1500000" : "700000");
     sysfs_write(SAMPLING_RATE_ONDEMAND,
                 on ? SAMPLING_RATE_SCREEN_ON : SAMPLING_RATE_SCREEN_OFF);
 }
-- 
1.7.9.5

